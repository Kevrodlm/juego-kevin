#include <SFML/Graphics.hpp>
#include <cmath>

class Character{
private:
    sf::CircleShape circle;
    float radius;
    float movementSpeed;

public:
    Character(float radius, float startX, float startY, float movementSpeed)
        : radius(radius), movementSpeed(movementSpeed)
    {
        circle.setRadius(radius);
        circle.setPosition(startX, startY);
    }

    void mover(sf::RenderWindow& window, sf::Keyboard::Key upKey, sf::Keyboard::Key downKey, sf::Keyboard::Key leftKey, sf::Keyboard::Key rightKey)
    {
        if (sf::Keyboard::isKeyPressed(upKey))
        {
            if (circle.getPosition().y - movementSpeed >= 0)
                circle.move(0, -movementSpeed);
        }
        else if (sf::Keyboard::isKeyPressed(downKey))
        {
            if (circle.getPosition().y + circle.getGlobalBounds().height + movementSpeed <= window.getSize().y)
                circle.move(0, movementSpeed);
        }

        if (sf::Keyboard::isKeyPressed(leftKey))
        {
            if (circle.getPosition().x - movementSpeed >= 0)
                circle.move(-movementSpeed, 0);
        }
        else if (sf::Keyboard::isKeyPressed(rightKey))
        {
            if (circle.getPosition().x + circle.getGlobalBounds().width + movementSpeed <= window.getSize().x &&
                circle.getPosition().x + movementSpeed <= window.getSize().x)
                circle.move(movementSpeed, 0);
        }
    }

    void dibujar(sf::RenderWindow& window) const
    {
        window.draw(circle);
    }

    const sf::CircleShape& getCircle() const
    {
        return circle;
    }

};

class Jugador : public Character
{
public:
    Jugador(float radius, float startX, float startY, float movementSpeed)
        : Character(radius, startX, startY, movementSpeed)
    {
        circle.setFillColor(sf::Color::Green);
    }
};

class Enemy : public Character
{

private:
    const Jugador& player;
public:
    Enemy(float radius, float startX, float startY, float movementSpeed, const Jugador& player)
        : Character(radius, startX, startY, movementSpeed), player(player)
    {
        circle.setFillColor(sf::Color::Red);
    }

    void actualizar()
    {
        sf::Vector2f playerPosition = player.getCircle().getPosition();
        sf::Vector2f enemyPosition = circle.getPosition();

        sf::Vector2f direction = playerPosition - enemyPosition;
        float magnitude = std::sqrt(direction.x * direction.x + direction.y * direction.y);
        direction /= magnitude;

        circle.move(direction * movementSpeed);
    }

};

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Movimiento de cÃ­rculooooo");
    window.setFramerateLimit(60);

    float jugadorMovementSpeed = 5.f;

    Jugador jugador(50.f, 500, 500, jugadorMovementSpeed);
    Enemy enemy(30.f, 100, 100, jugadorMovementSpeed/2, jugador);

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        jugador.mover(window, sf::Keyboard::W, sf::Keyboard::S, sf::Keyboard::A, sf::Keyboard::D);
        enemy.actualizar();

        window.clear();
        jugador.dibujar(window);
        enemy.dibujar(window);
        window.display();
    }

    return 0;
}
